const {expect} = require('chai')

const {resolvePath} = require('../../src/path.js')

describe('resolvePath()', function () {
  it('should support resolving against absolute paths', function () {
    expect(resolvePath('/', '')).to.equal('/')
    expect(resolvePath('/', '.')).to.equal('/')
    expect(resolvePath('/', '/')).to.equal('/')
    expect(resolvePath('/', '/x/y')).to.equal('/x/y')
    expect(resolvePath('/p/a/t/h', '')).to.equal('/p/a/t/h')
    expect(resolvePath('/p/a/t/h', '/x/y')).to.equal('/x/y')
    expect(resolvePath('/p/a/t/h', 'x')).to.equal('/p/a/t/x')
    expect(resolvePath('/p/a/t/h/', 'x')).to.equal('/p/a/t/h/x')
    expect(resolvePath('/p/a/t/h', 'x/')).to.equal('/p/a/t/x/')
    expect(resolvePath('/p/a/t/h', 'x/y')).to.equal('/p/a/t/x/y')
    expect(resolvePath('/p/a/t/h', 'x?y#z')).to.equal('/p/a/t/x?y#z')
    expect(resolvePath('/p/a/t/h', '.')).to.equal('/p/a/t/')
    expect(resolvePath('/p/a/t/h', './x')).to.equal('/p/a/t/x')
    expect(resolvePath('/p/a/t/h', '..')).to.equal('/p/a/')
    expect(resolvePath('/p/a/t/h', '../x')).to.equal('/p/a/x')
    expect(resolvePath('/p/a/t/h', '../../..')).to.equal('/')
    expect(resolvePath('/p/a/t/h', '../../../x')).to.equal('/x')
    expect(resolvePath('/p/a/t/h', '../../../..')).to.equal('/')
    expect(resolvePath('/p/a/t/h', '../../../../x')).to.equal('/x')
    expect(resolvePath('/p/a/t/h', '../../../../..')).to.equal('/')
  })

  it('should support resolving against relative paths', function () {
    expect(resolvePath('', '')).to.equal('.')
    expect(resolvePath('', '.')).to.equal('.')
    expect(resolvePath('', '/')).to.equal('/')
    expect(resolvePath('', '/x/y')).to.equal('/x/y')
    expect(resolvePath('p/a/t/h', '')).to.equal('p/a/t/h')
    expect(resolvePath('p/a/t/h', '/x/y')).to.equal('/x/y')
    expect(resolvePath('p/a/t/h', 'x')).to.equal('p/a/t/x')
    expect(resolvePath('p/a/t/h/', 'x')).to.equal('p/a/t/h/x')
    expect(resolvePath('p/a/t/h', 'x/')).to.equal('p/a/t/x/')
    expect(resolvePath('p/a/t/h', 'x/y')).to.equal('p/a/t/x/y')
    expect(resolvePath('p/a/t/h', 'x?y#z')).to.equal('p/a/t/x?y#z')
    expect(resolvePath('p/a/t/h', '.')).to.equal('p/a/t/')
    expect(resolvePath('p/a/t/h', './x')).to.equal('p/a/t/x')
    expect(resolvePath('p/a/t/h', '..')).to.equal('p/a/')
    expect(resolvePath('p/a/t/h', '../x')).to.equal('p/a/x')
    expect(resolvePath('p/a/t/h', '../../..')).to.equal('.')
    expect(resolvePath('p/a/t/h', '../../../x')).to.equal('x')
    expect(resolvePath('p/a/t/h', '../../../..')).to.equal('..')
    expect(resolvePath('p/a/t/h', '../../../../x')).to.equal('../x')
    expect(resolvePath('p/a/t/h', '../../../../..')).to.equal('../..')
  })
})
